# Genetic Algorithms in Elixir

```elixir
Mix.install([
  {:kino, "~> 0.7.0"}
])
```

## Chapter 2

```elixir
defmodule Genetic do
  def initialize(genotype, opts \\ []) do
    population_size = Keyword.get(opts, :population_size, 100)
    for _ <- 1..population_size, do: genotype.()
  end

  def evaluate(population, fitness_function, opts \\ []) do
    Enum.sort_by(population, fitness_function, &>=/2)
  end

  def select(population, opts \\ []) do
    population
    |> Enum.chunk_every(2)
    |> Enum.map(&List.to_tuple(&1))
  end

  def crossover(population, opts \\ []) do
    Enum.reduce(population, [], fn {p1, p2}, acc ->
      cx_point = :rand.uniform(length(p1))
      {{h1, t1}, {h2, t2}} = {Enum.split(p1, cx_point), Enum.split(p2, cx_point)}
      [h1 ++ t2, h2 ++ t1 | acc]
    end)
  end

  def mutation(population, opts \\ []) do
    population
    |> Enum.map(fn chromosome ->
      if :rand.uniform() < 0.05 do
        Enum.shuffle(chromosome)
      else
        chromosome
      end
    end)
  end

  def evolve(population, fitness_function, max_fitness, opts \\ []) do
    population = evaluate(population, fitness_function, opts)
    best = hd(population)
    IO.write("\rCurrent Best: #{fitness_function.(best)}")

    if fitness_function.(best) >= max_fitness do
      best
    else
      population
      |> select(opts)
      |> crossover(opts)
      |> mutation(opts)
      |> evolve(fitness_function, max_fitness, opts)
    end
  end

  def run(fitness_function, genotype, max_fitness, opts \\ []) do
    population = initialize(genotype)

    population
    |> evolve(fitness_function, max_fitness, opts)
  end
end
```

```elixir
genotype = fn -> for _ <- 1..1000, do: Enum.random(0..1) end

fitness_function = fn chromosome -> Enum.sum(chromosome) end
max_fitness = 1000

soln = Genetic.run(fitness_function, genotype, max_fitness, population_size: 100)
IO.write("\n")
IO.inspect(soln)
```

## Knapsack

```elixir
items = %{
  0 => %{
    :value => 321,
    :weight => 288
  },
  1 => %{
    :value => 942,
    :weight => 853
  },
  2 => %{
    :value => 339,
    :weight => 291
  },
  3 => %{
    :value => 31,
    :weight => 102
  },
  4 => %{
    :value => 463,
    :weight => 529
  },
  5 => %{
    :value => 149,
    :weight => 90
  },
  6 => %{
    :value => 50,
    :weight => 132
  },
  7 => %{
    :value => 745,
    :weight => 717
  },
  8 => %{
    :value => 395,
    :weight => 417
  },
  9 => %{
    :value => 377,
    :weight => 285
  }
}

capacity = 2000

genotype = fn -> for _ <- 1..Enum.count(items), do: Enum.random(0..1) end
genotype.()

fitness_function = fn chromosome ->
  active_bits =
    chromosome
    |> Enum.with_index()
    |> Enum.filter(fn {element, _} ->
      element == 1
    end)

  total_weight =
    active_bits
    |> Enum.map(fn {_, index} ->
      items[index].weight
    end)
    |> Enum.sum()

  total_value =
    active_bits
    |> Enum.map(fn {_, index} ->
      items[index].value
    end)
    |> Enum.sum()

  if total_weight > capacity do
    0
  else
    total_value
  end
end

max_fitness = 2213

soln = Genetic.run(fitness_function, genotype, max_fitness, population_size: 500)
IO.write("\n")
IO.inspect(soln)
```
